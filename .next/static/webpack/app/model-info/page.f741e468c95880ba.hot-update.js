"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/model-info/page",{

/***/ "(app-pages-browser)/./src/api/client.ts":
/*!***************************!*\
  !*** ./src/api/client.ts ***!
  \***************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   apiClient: function() { return /* binding */ apiClient; }\n/* harmony export */ });\nconst API_BASE_URL = \"/api\" || 0;\nclass ApiClient {\n    async request(endpoint) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        const url = \"\".concat(this.baseUrl).concat(endpoint);\n        const config = {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                ...options.headers\n            },\n            ...options\n        };\n        try {\n            const response = await fetch(url, config);\n            if (!response.ok) {\n                const errorData = await response.json();\n                throw new Error(errorData.detail || \"HTTP error! status: \".concat(response.status));\n            }\n            return await response.json();\n        } catch (error) {\n            console.error(\"API Error on \".concat(endpoint, \":\"), error);\n            throw error;\n        }\n    }\n    // Model endpoints\n    async getModelInfo() {\n        return this.request(\"/model/info\");\n    }\n    async getModelVersions(modelName) {\n        return this.request(\"/model-versions/\".concat(modelName));\n    }\n    async getModelVersionInfo(modelName, version) {\n        return this.request(\"/model-info/\".concat(modelName, \"/\").concat(version));\n    }\n    async getModelInfoDetailed(modelName) {\n        return this.request(\"/model-info/\".concat(modelName));\n    }\n    // Prediction endpoints\n    async predict(data, params) {\n        const queryParams = new URLSearchParams();\n        if (params === null || params === void 0 ? void 0 : params.model_name) queryParams.append(\"model_name\", params.model_name);\n        if (params === null || params === void 0 ? void 0 : params.version) queryParams.append(\"version\", params.version);\n        const url = \"/predict\".concat(queryParams.toString() ? \"?\".concat(queryParams.toString()) : \"\");\n        return this.request(url, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                data\n            })\n        });\n    }\n    async uploadFile(file, params) {\n        const formData = new FormData();\n        formData.append(\"file\", file);\n        const queryParams = new URLSearchParams();\n        if (params === null || params === void 0 ? void 0 : params.model_name) queryParams.append(\"model_name\", params.model_name);\n        if (params === null || params === void 0 ? void 0 : params.version) queryParams.append(\"version\", params.version);\n        const url = \"\".concat(this.baseUrl, \"/predict/upload\").concat(queryParams.toString() ? \"?\".concat(queryParams.toString()) : \"\");\n        const response = await fetch(url, {\n            method: \"POST\",\n            body: formData\n        });\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.detail || \"HTTP error! status: \".concat(response.status));\n        }\n        return await response.json();\n    }\n    async downloadFile(filename) {\n        const response = await fetch(\"\".concat(this.baseUrl, \"/download/\").concat(filename));\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.detail || \"HTTP error! status: \".concat(response.status));\n        }\n        return await response.blob();\n    }\n    // Training endpoint\n    async trainModel(params) {\n        return this.request(\"/train\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(params)\n        });\n    }\n    // Dashboard endpoints\n    async getDashboardMetrics(modelName, version) {\n        const modelVersionInfo = await this.getModelVersionInfo(modelName, version);\n        // Transform the data to match DashboardMetrics interface\n        const confusionMatrix = {\n            \"CANDIDATE\": {\n                \"CANDIDATE\": modelVersionInfo.confusion_matrix[0][0],\n                \"CONFIRMED\": modelVersionInfo.confusion_matrix[0][1],\n                \"FALSE POSITIVE\": modelVersionInfo.confusion_matrix[0][2]\n            },\n            \"CONFIRMED\": {\n                \"CANDIDATE\": modelVersionInfo.confusion_matrix[1][0],\n                \"CONFIRMED\": modelVersionInfo.confusion_matrix[1][1],\n                \"FALSE POSITIVE\": modelVersionInfo.confusion_matrix[1][2]\n            },\n            \"FALSE POSITIVE\": {\n                \"CANDIDATE\": modelVersionInfo.confusion_matrix[2][0],\n                \"CONFIRMED\": modelVersionInfo.confusion_matrix[2][1],\n                \"FALSE POSITIVE\": modelVersionInfo.confusion_matrix[2][2]\n            }\n        };\n        // Calculate class distribution from confusion matrix\n        const classDistribution = {\n            \"CANDIDATE\": modelVersionInfo.confusion_matrix[0].reduce((sum, val)=>sum + val, 0),\n            \"CONFIRMED\": modelVersionInfo.confusion_matrix[1].reduce((sum, val)=>sum + val, 0),\n            \"FALSE POSITIVE\": modelVersionInfo.confusion_matrix[2].reduce((sum, val)=>sum + val, 0)\n        };\n        return {\n            confusion_matrix: confusionMatrix,\n            class_distribution: classDistribution\n        };\n    }\n    // Training endpoints\n    async trainModel(params) {\n        return this.request(\"/train\", {\n            method: \"POST\",\n            body: JSON.stringify(params)\n        });\n    }\n    // Health check\n    async healthCheck() {\n        try {\n            return await this.request(\"/health\");\n        } catch (e) {\n            // If health endpoint doesn't exist, try model info as fallback\n            await this.getModelInfo();\n            return {\n                status: \"ok\"\n            };\n        }\n    }\n    constructor(baseUrl = API_BASE_URL){\n        this.baseUrl = baseUrl;\n    }\n}\n// Create and export a singleton instance\nconst apiClient = new ApiClient();\n/* harmony default export */ __webpack_exports__[\"default\"] = (apiClient);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q2YsTUFBTTJCLGNBQTJDO1FBQy9DLElBQUk7WUFDRixPQUFPLE1BQU0sSUFBSSxDQUFDcEQsT0FBTyxDQUFxQjtRQUNoRCxFQUFFLFVBQU07WUFDTiwrREFBK0Q7WUFDL0QsTUFBTSxJQUFJLENBQUNpQixZQUFZO1lBQ3ZCLE9BQU87Z0JBQUVILFFBQVE7WUFBSztRQUN4QjtJQUNGO0lBcktBdUMsWUFBWWpELFVBQWtCVCxZQUFZLENBQUU7UUFDMUMsSUFBSSxDQUFDUyxPQUFPLEdBQUdBO0lBQ2pCO0FBb0tGO0FBRUEseUNBQXlDO0FBQ2xDLE1BQU1rRCxZQUFZLElBQUl2RCxZQUFZO0FBQ3pDLCtEQUFldUQsU0FBU0EsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvYXBpL2NsaWVudC50cz81OTY1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEV4b3BsYW5ldERhdGEsXG4gIFByZWRpY3Rpb25SZXF1ZXN0LFxuICBQcmVkaWN0aW9uUmVzcG9uc2UsXG4gIFByZWRpY3Rpb25QYXJhbXMsXG4gIE1vZGVsSW5mbyxcbiAgTW9kZWxJbmZvRGV0YWlsZWQsXG4gIE1vZGVsVmVyc2lvbnMsXG4gIE1vZGVsVmVyc2lvbkluZm8sXG4gIERhc2hib2FyZE1ldHJpY3MsXG4gIFVwbG9hZFJlc3BvbnNlLFxuICBUcmFpbmluZ1BhcmFtcyxcbiAgVHJhaW5pbmdSZXNwb25zZSxcbiAgQXBpRXJyb3IsXG4gIENvbmZ1c2lvbk1hdHJpeCxcbiAgQ2xhc3NEaXN0cmlidXRpb25cbn0gZnJvbSAnLi90eXBlcyc7XG5cbmNvbnN0IEFQSV9CQVNFX1VSTCA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0FQSV9VUkwgfHwgJy9hcGknO1xuXG5jbGFzcyBBcGlDbGllbnQge1xuICBwcml2YXRlIGJhc2VVcmw6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihiYXNlVXJsOiBzdHJpbmcgPSBBUElfQkFTRV9VUkwpIHtcbiAgICB0aGlzLmJhc2VVcmwgPSBiYXNlVXJsO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyByZXF1ZXN0PFQ+KFxuICAgIGVuZHBvaW50OiBzdHJpbmcsXG4gICAgb3B0aW9uczogUmVxdWVzdEluaXQgPSB7fVxuICApOiBQcm9taXNlPFQ+IHtcbiAgICBjb25zdCB1cmwgPSBgJHt0aGlzLmJhc2VVcmx9JHtlbmRwb2ludH1gO1xuICAgIFxuICAgIGNvbnN0IGNvbmZpZzogUmVxdWVzdEluaXQgPSB7XG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgIC4uLm9wdGlvbnMuaGVhZGVycyxcbiAgICAgIH0sXG4gICAgICAuLi5vcHRpb25zLFxuICAgIH07XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwsIGNvbmZpZyk7XG4gICAgICBcbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgY29uc3QgZXJyb3JEYXRhOiBBcGlFcnJvciA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yRGF0YS5kZXRhaWwgfHwgYEhUVFAgZXJyb3IhIHN0YXR1czogJHtyZXNwb25zZS5zdGF0dXN9YCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYEFQSSBFcnJvciBvbiAke2VuZHBvaW50fTpgLCBlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cblxuICAvLyBNb2RlbCBlbmRwb2ludHNcbiAgYXN5bmMgZ2V0TW9kZWxJbmZvKCk6IFByb21pc2U8TW9kZWxJbmZvPiB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdDxNb2RlbEluZm8+KCcvbW9kZWwvaW5mbycpO1xuICB9XG5cbiAgYXN5bmMgZ2V0TW9kZWxWZXJzaW9ucyhtb2RlbE5hbWU6IHN0cmluZyk6IFByb21pc2U8TW9kZWxWZXJzaW9ucz4ge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3Q8TW9kZWxWZXJzaW9ucz4oYC9tb2RlbC12ZXJzaW9ucy8ke21vZGVsTmFtZX1gKTtcbiAgfVxuXG4gIGFzeW5jIGdldE1vZGVsVmVyc2lvbkluZm8obW9kZWxOYW1lOiBzdHJpbmcsIHZlcnNpb246IHN0cmluZyk6IFByb21pc2U8TW9kZWxWZXJzaW9uSW5mbz4ge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3Q8TW9kZWxWZXJzaW9uSW5mbz4oYC9tb2RlbC1pbmZvLyR7bW9kZWxOYW1lfS8ke3ZlcnNpb259YCk7XG4gIH1cblxuICBhc3luYyBnZXRNb2RlbEluZm9EZXRhaWxlZChtb2RlbE5hbWU6IHN0cmluZyk6IFByb21pc2U8TW9kZWxJbmZvRGV0YWlsZWQ+IHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0PE1vZGVsSW5mb0RldGFpbGVkPihgL21vZGVsLWluZm8vJHttb2RlbE5hbWV9YCk7XG4gIH1cblxuICAvLyBQcmVkaWN0aW9uIGVuZHBvaW50c1xuICBhc3luYyBwcmVkaWN0KGRhdGE6IEV4b3BsYW5ldERhdGFbXSwgcGFyYW1zPzogUHJlZGljdGlvblBhcmFtcyk6IFByb21pc2U8UHJlZGljdGlvblJlc3BvbnNlPiB7XG4gICAgY29uc3QgcXVlcnlQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKCk7XG4gICAgaWYgKHBhcmFtcz8ubW9kZWxfbmFtZSkgcXVlcnlQYXJhbXMuYXBwZW5kKCdtb2RlbF9uYW1lJywgcGFyYW1zLm1vZGVsX25hbWUpO1xuICAgIGlmIChwYXJhbXM/LnZlcnNpb24pIHF1ZXJ5UGFyYW1zLmFwcGVuZCgndmVyc2lvbicsIHBhcmFtcy52ZXJzaW9uKTtcbiAgICBcbiAgICBjb25zdCB1cmwgPSBgL3ByZWRpY3Qke3F1ZXJ5UGFyYW1zLnRvU3RyaW5nKCkgPyBgPyR7cXVlcnlQYXJhbXMudG9TdHJpbmcoKX1gIDogJyd9YDtcbiAgICBcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0PFByZWRpY3Rpb25SZXNwb25zZT4odXJsLCB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgIH0sXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IGRhdGEgfSksXG4gICAgfSk7XG4gIH1cblxuICBhc3luYyB1cGxvYWRGaWxlKGZpbGU6IEZpbGUsIHBhcmFtcz86IFByZWRpY3Rpb25QYXJhbXMpOiBQcm9taXNlPFVwbG9hZFJlc3BvbnNlPiB7XG4gICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgICBmb3JtRGF0YS5hcHBlbmQoJ2ZpbGUnLCBmaWxlKTtcblxuICAgIGNvbnN0IHF1ZXJ5UGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuICAgIGlmIChwYXJhbXM/Lm1vZGVsX25hbWUpIHF1ZXJ5UGFyYW1zLmFwcGVuZCgnbW9kZWxfbmFtZScsIHBhcmFtcy5tb2RlbF9uYW1lKTtcbiAgICBpZiAocGFyYW1zPy52ZXJzaW9uKSBxdWVyeVBhcmFtcy5hcHBlbmQoJ3ZlcnNpb24nLCBwYXJhbXMudmVyc2lvbik7XG4gICAgXG4gICAgY29uc3QgdXJsID0gYCR7dGhpcy5iYXNlVXJsfS9wcmVkaWN0L3VwbG9hZCR7cXVlcnlQYXJhbXMudG9TdHJpbmcoKSA/IGA/JHtxdWVyeVBhcmFtcy50b1N0cmluZygpfWAgOiAnJ31gO1xuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwsIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgYm9keTogZm9ybURhdGEsXG4gICAgfSk7XG5cbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICBjb25zdCBlcnJvckRhdGE6IEFwaUVycm9yID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yRGF0YS5kZXRhaWwgfHwgYEhUVFAgZXJyb3IhIHN0YXR1czogJHtyZXNwb25zZS5zdGF0dXN9YCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgfVxuXG4gIGFzeW5jIGRvd25sb2FkRmlsZShmaWxlbmFtZTogc3RyaW5nKTogUHJvbWlzZTxCbG9iPiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHt0aGlzLmJhc2VVcmx9L2Rvd25sb2FkLyR7ZmlsZW5hbWV9YCk7XG4gICAgXG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgY29uc3QgZXJyb3JEYXRhOiBBcGlFcnJvciA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvckRhdGEuZGV0YWlsIHx8IGBIVFRQIGVycm9yISBzdGF0dXM6ICR7cmVzcG9uc2Uuc3RhdHVzfWApO1xuICAgIH1cblxuICAgIHJldHVybiBhd2FpdCByZXNwb25zZS5ibG9iKCk7XG4gIH1cblxuICAvLyBUcmFpbmluZyBlbmRwb2ludFxuICBhc3luYyB0cmFpbk1vZGVsKHBhcmFtczogVHJhaW5pbmdQYXJhbXMpOiBQcm9taXNlPFRyYWluaW5nUmVzcG9uc2U+IHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0PFRyYWluaW5nUmVzcG9uc2U+KCcvdHJhaW4nLCB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgIH0sXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShwYXJhbXMpLFxuICAgIH0pO1xuICB9XG5cbiAgLy8gRGFzaGJvYXJkIGVuZHBvaW50c1xuICBhc3luYyBnZXREYXNoYm9hcmRNZXRyaWNzKG1vZGVsTmFtZTogc3RyaW5nLCB2ZXJzaW9uOiBzdHJpbmcpOiBQcm9taXNlPERhc2hib2FyZE1ldHJpY3M+IHtcbiAgICBjb25zdCBtb2RlbFZlcnNpb25JbmZvID0gYXdhaXQgdGhpcy5nZXRNb2RlbFZlcnNpb25JbmZvKG1vZGVsTmFtZSwgdmVyc2lvbik7XG4gICAgXG4gICAgLy8gVHJhbnNmb3JtIHRoZSBkYXRhIHRvIG1hdGNoIERhc2hib2FyZE1ldHJpY3MgaW50ZXJmYWNlXG4gICAgY29uc3QgY29uZnVzaW9uTWF0cml4OiBDb25mdXNpb25NYXRyaXggPSB7XG4gICAgICAnQ0FORElEQVRFJzoge1xuICAgICAgICAnQ0FORElEQVRFJzogbW9kZWxWZXJzaW9uSW5mby5jb25mdXNpb25fbWF0cml4WzBdWzBdLFxuICAgICAgICAnQ09ORklSTUVEJzogbW9kZWxWZXJzaW9uSW5mby5jb25mdXNpb25fbWF0cml4WzBdWzFdLFxuICAgICAgICAnRkFMU0UgUE9TSVRJVkUnOiBtb2RlbFZlcnNpb25JbmZvLmNvbmZ1c2lvbl9tYXRyaXhbMF1bMl1cbiAgICAgIH0sXG4gICAgICAnQ09ORklSTUVEJzoge1xuICAgICAgICAnQ0FORElEQVRFJzogbW9kZWxWZXJzaW9uSW5mby5jb25mdXNpb25fbWF0cml4WzFdWzBdLFxuICAgICAgICAnQ09ORklSTUVEJzogbW9kZWxWZXJzaW9uSW5mby5jb25mdXNpb25fbWF0cml4WzFdWzFdLFxuICAgICAgICAnRkFMU0UgUE9TSVRJVkUnOiBtb2RlbFZlcnNpb25JbmZvLmNvbmZ1c2lvbl9tYXRyaXhbMV1bMl1cbiAgICAgIH0sXG4gICAgICAnRkFMU0UgUE9TSVRJVkUnOiB7XG4gICAgICAgICdDQU5ESURBVEUnOiBtb2RlbFZlcnNpb25JbmZvLmNvbmZ1c2lvbl9tYXRyaXhbMl1bMF0sXG4gICAgICAgICdDT05GSVJNRUQnOiBtb2RlbFZlcnNpb25JbmZvLmNvbmZ1c2lvbl9tYXRyaXhbMl1bMV0sXG4gICAgICAgICdGQUxTRSBQT1NJVElWRSc6IG1vZGVsVmVyc2lvbkluZm8uY29uZnVzaW9uX21hdHJpeFsyXVsyXVxuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBDYWxjdWxhdGUgY2xhc3MgZGlzdHJpYnV0aW9uIGZyb20gY29uZnVzaW9uIG1hdHJpeFxuICAgIGNvbnN0IGNsYXNzRGlzdHJpYnV0aW9uOiBDbGFzc0Rpc3RyaWJ1dGlvbiA9IHtcbiAgICAgICdDQU5ESURBVEUnOiBtb2RlbFZlcnNpb25JbmZvLmNvbmZ1c2lvbl9tYXRyaXhbMF0ucmVkdWNlKChzdW0sIHZhbCkgPT4gc3VtICsgdmFsLCAwKSxcbiAgICAgICdDT05GSVJNRUQnOiBtb2RlbFZlcnNpb25JbmZvLmNvbmZ1c2lvbl9tYXRyaXhbMV0ucmVkdWNlKChzdW0sIHZhbCkgPT4gc3VtICsgdmFsLCAwKSxcbiAgICAgICdGQUxTRSBQT1NJVElWRSc6IG1vZGVsVmVyc2lvbkluZm8uY29uZnVzaW9uX21hdHJpeFsyXS5yZWR1Y2UoKHN1bSwgdmFsKSA9PiBzdW0gKyB2YWwsIDApXG4gICAgfTtcblxuICAgIHJldHVybiB7XG4gICAgICBjb25mdXNpb25fbWF0cml4OiBjb25mdXNpb25NYXRyaXgsXG4gICAgICBjbGFzc19kaXN0cmlidXRpb246IGNsYXNzRGlzdHJpYnV0aW9uXG4gICAgfTtcbiAgfVxuXG4gIC8vIFRyYWluaW5nIGVuZHBvaW50c1xuICBhc3luYyB0cmFpbk1vZGVsKHBhcmFtczogVHJhaW5pbmdQYXJhbXMpOiBQcm9taXNlPFRyYWluaW5nUmVzcG9uc2U+IHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0PFRyYWluaW5nUmVzcG9uc2U+KCcvdHJhaW4nLCB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBhcmFtcyksXG4gICAgfSk7XG4gIH1cblxuICAvLyBIZWFsdGggY2hlY2tcbiAgYXN5bmMgaGVhbHRoQ2hlY2soKTogUHJvbWlzZTx7IHN0YXR1czogc3RyaW5nIH0+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucmVxdWVzdDx7IHN0YXR1czogc3RyaW5nIH0+KCcvaGVhbHRoJyk7XG4gICAgfSBjYXRjaCB7XG4gICAgICAvLyBJZiBoZWFsdGggZW5kcG9pbnQgZG9lc24ndCBleGlzdCwgdHJ5IG1vZGVsIGluZm8gYXMgZmFsbGJhY2tcbiAgICAgIGF3YWl0IHRoaXMuZ2V0TW9kZWxJbmZvKCk7XG4gICAgICByZXR1cm4geyBzdGF0dXM6ICdvaycgfTtcbiAgICB9XG4gIH1cbn1cblxuLy8gQ3JlYXRlIGFuZCBleHBvcnQgYSBzaW5nbGV0b24gaW5zdGFuY2VcbmV4cG9ydCBjb25zdCBhcGlDbGllbnQgPSBuZXcgQXBpQ2xpZW50KCk7XG5leHBvcnQgZGVmYXVsdCBhcGlDbGllbnQ7XG4iXSwibmFtZXMiOlsiQVBJX0JBU0VfVVJMIiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX0FQSV9VUkwiLCJBcGlDbGllbnQiLCJyZXF1ZXN0IiwiZW5kcG9pbnQiLCJvcHRpb25zIiwidXJsIiwiYmFzZVVybCIsImNvbmZpZyIsImhlYWRlcnMiLCJyZXNwb25zZSIsImZldGNoIiwib2siLCJlcnJvckRhdGEiLCJqc29uIiwiRXJyb3IiLCJkZXRhaWwiLCJzdGF0dXMiLCJlcnJvciIsImNvbnNvbGUiLCJnZXRNb2RlbEluZm8iLCJnZXRNb2RlbFZlcnNpb25zIiwibW9kZWxOYW1lIiwiZ2V0TW9kZWxWZXJzaW9uSW5mbyIsInZlcnNpb24iLCJnZXRNb2RlbEluZm9EZXRhaWxlZCIsInByZWRpY3QiLCJkYXRhIiwicGFyYW1zIiwicXVlcnlQYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJtb2RlbF9uYW1lIiwiYXBwZW5kIiwidG9TdHJpbmciLCJtZXRob2QiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsInVwbG9hZEZpbGUiLCJmaWxlIiwiZm9ybURhdGEiLCJGb3JtRGF0YSIsImRvd25sb2FkRmlsZSIsImZpbGVuYW1lIiwiYmxvYiIsInRyYWluTW9kZWwiLCJnZXREYXNoYm9hcmRNZXRyaWNzIiwibW9kZWxWZXJzaW9uSW5mbyIsImNvbmZ1c2lvbk1hdHJpeCIsImNvbmZ1c2lvbl9tYXRyaXgiLCJjbGFzc0Rpc3RyaWJ1dGlvbiIsInJlZHVjZSIsInN1bSIsInZhbCIsImNsYXNzX2Rpc3RyaWJ1dGlvbiIsImhlYWx0aENoZWNrIiwiY29uc3RydWN0b3IiLCJhcGlDbGllbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/api/client.ts\n"));

/***/ })

});